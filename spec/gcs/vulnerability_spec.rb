# frozen_string_literal: true
RSpec.describe Gcs::Vulnerability do
  let(:params) do
    {
      'category' => 'container_scanning',
      'message' => '',
      'description' =>
      'In musl libc through 1.2.1, wcsnrtombs mishandles particular combinations of destination buffer size and' \
      ' source character limit, as demonstrated by an invalid write access (buffer overflow).',
      'cve' => 'CVE-2020-28928',
      'severity' => 'Unknown',
      'confidence' => 'Unknown',
      'solution' => 'Upgrade musl to 1.1.24-r10',
      'scanner' => { 'id' => 'trivy', 'name' => 'trivy' },
      'location' => {
        'dependency' => {
          'package' => { 'name' => 'musl' }, 'version' => '1.1.24-r8'
        },
        'operating_system' => 'Unknown',
        'image' => 'registry.example.com/group/project/branch:tag (alpine 3.12.0)'
      },
      'identifiers' => [
        {
          'type' => 'cve',
          'name' => 'CVE-2020-28928',
          'value' => 'CVE-2020-28928',
          'url' => ''
        }
      ],
      'links' => [
        { 'url' => 'http://www.openwall.com/lists/oss-security/2020/11/20/4' },
        { 'url' => 'https://musl.libc.org/releases.html' }
      ]
    }
  end

  before do
    allow(ENV).to receive(:fetch).with('CI_DEFAULT_BRANCH').and_return('main')
    allow(ENV).to receive(:fetch).with('CI_REGISTRY_IMAGE').and_return('registry.example.com/group/project')
    allow(ENV).to receive(:include?).with('CI_DEFAULT_BRANCH').and_return(true)
    allow(ENV).to receive(:include?).with('CI_REGISTRY_IMAGE').and_return(true)
    allow(ENV).to receive(:fetch).with('CI_APPLICATION_TAG').and_return('latest')
    allow(ENV).to receive(:fetch).with('CS_DEFAULT_BRANCH_IMAGE', nil).and_return(nil)
  end

  it 'formats vulnerability to parsable format' do
    vulnerability = described_class.new(params)
    expect(vulnerability.to_hash).to match(
      {
        "id" => "a6233387c0063d8a5cd3a57407bb3c8d74fe373f",
        'category' => 'container_scanning',
        'message' => '',
        'description' =>
        'In musl libc through 1.2.1, wcsnrtombs mishandles particular combinations of destination buffer size and' \
        ' source character limit, as demonstrated by an invalid write access (buffer overflow).',
        'cve' => 'CVE-2020-28928',
        'severity' => 'Unknown',
        'confidence' => 'Unknown',
        'solution' => 'Upgrade musl to 1.1.24-r10',
        'scanner' => { 'id' => 'trivy', 'name' => 'trivy' },
        "location" => {
          "dependency" => {
            "package" => { "name" => "musl" },
            "version" => "1.1.24-r8"
          },
          "image" => "registry.example.com/group/project/branch:tag",
          "operating_system" => "alpine 3.12.0"
        },
        'identifiers' => [
          {
            'type' => 'cve',
            'name' => 'CVE-2020-28928',
            'value' => 'CVE-2020-28928',
            'url' => 'http://www.openwall.com/lists/oss-security/2020/11/20/4'
          }
        ],
        'links' => [
          {
            'url' => 'http://www.openwall.com/lists/oss-security/2020/11/20/4'
          },
          { 'url' => 'https://musl.libc.org/releases.html' }
        ]
      }
    )
  end

  it 'formats image_name and operating_system' do
    params['location']['image'] = 'alpine:latest'
    params['location']['operating_system'] = 'alpine 3.12.0'

    vulnerability = described_class.new(params)
    expect(vulnerability.to_hash['location']['image']).to eq('alpine:latest')
    expect(vulnerability.to_hash['location']['operating_system']).to eq('alpine 3.12.0')
  end

  context 'when image is empty' do
    it 'sets image name to requested image name' do
      params['location']['image'] = ''

      vulnerability = described_class.new(params, 'requested/image:name')
      expect(vulnerability.to_hash['location']['image']).to eq('requested/image:name')
    end
  end

  context 'with valid default_branch_image' do
    let(:valid_images) do
      %w[registry.com/product/webgoat-8.0:latest
         registry.com:latest
         ubuntu:latest
         gdk.local:5000/group/project:tag
         dev.gitlab.org:5005/gitlab/charts/components/images/gitlab-webservice-ee:14-5-202111161320-d44dcb9085e]
    end

    it 'sets default_branch_image' do
      valid_images.each do |image|
        allow(ENV).to receive(:fetch).with('CS_DEFAULT_BRANCH_IMAGE', nil).and_return(image)

        vulnerability = described_class.new(params)
        expect(vulnerability.to_hash).to match(
          {
            "id" => vulnerability.id,
            'category' => 'container_scanning',
            'message' => '',
            'description' =>
            'In musl libc through 1.2.1, wcsnrtombs mishandles particular combinations of destination buffer size and' \
            ' source character limit, as demonstrated by an invalid write access (buffer overflow).',
            'cve' => 'CVE-2020-28928',
            'severity' => 'Unknown',
            'confidence' => 'Unknown',
            'solution' => 'Upgrade musl to 1.1.24-r10',
            'scanner' => { 'id' => 'trivy', 'name' => 'trivy' },
            "location" => {
              "dependency" => {
                "package" => {
                  "name" => "musl"
                },
                "version" => "1.1.24-r8"
              },
              "image" => "registry.example.com/group/project/branch:tag",
              "operating_system" => "alpine 3.12.0",
              "default_branch_image" => image
            },
            'identifiers' => [
              {
                'type' => 'cve',
                'name' => 'CVE-2020-28928',
                'value' => 'CVE-2020-28928',
                'url' => 'http://www.openwall.com/lists/oss-security/2020/11/20/4'
              }
            ],
            'links' => [
              {
                'url' => 'http://www.openwall.com/lists/oss-security/2020/11/20/4'
              },
              { 'url' => 'https://musl.libc.org/releases.html' }
            ]
          }
        )
      end
    end
  end

  context "with invalid default_branch_image" do
    let(:invalid_images) do
      %w[https://registry.com/product/webgoat-8.0:latest
         registry.com/product/webgoat-8.0:tag:another-tag
         registry.com/image?key=value
         registry.com\\image:latest
         user@registry.com/image:latest
         registry.com/product/webgoat-8.0@sha256:bc09fe2e0]
    end

    it 'does not set default_branch_image' do
      invalid_images.each do |image|
        allow(ENV).to receive(:fetch).with('CS_DEFAULT_BRANCH_IMAGE', nil).and_return(image)
        vulnerability = described_class.new(params)
        expect(vulnerability.to_hash.dig("location", "default_branch_image")).to be(nil)
      end
    end
  end
end
