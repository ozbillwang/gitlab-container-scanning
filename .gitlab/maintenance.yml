create_release:
  stage: maintenance
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "api"'
      when: never
    - if: $CI_COMMIT_TAG
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo 'release job'
  release:
    name: '$CI_COMMIT_TAG'
    tag_name: '$CI_COMMIT_TAG'
    ref: '$CI_COMMIT_TAG'
    description: 'Release created by pipeline $CI_PIPELINE_URL'

update_changelog:
  extends: .ruby-alpine
  stage: maintenance
  script:
    - bundle exec rake changelog
  rules:
    # consider pipelines triggered via API to be coming from trigger-db-update; they would have
    # already been run on the original pipeline when the tag first appeared. Also ignore schedule
    # pipelines.
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "api"'
      when: never
    - if: $CI_COMMIT_TAG

trigger-db-update:
  extends: .ruby-alpine
  stage: maintenance
  script: bundle exec rake trigger_db_update
  rules:
    - if: '$TRIGGER_DB_UPDATE_FOR_MAJOR_VERSIONS && $CI_PIPELINE_SOURCE == "schedule"'

trigger-scanner-update:
  extends: .ruby-alpine
  parallel:
    matrix:
      - SCANNER: [trivy, grype]
  stage: maintenance
  allow_failure:
    exit_codes: 1
  script:
    - bundle exec rake update_scanner_and_create_mr
  rules:
    - if: '$TRIGGER_SCANNER_UPDATE && $CI_PIPELINE_SOURCE == "schedule"'
