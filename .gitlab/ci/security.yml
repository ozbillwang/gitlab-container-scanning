include:
  - template: Security/Container-Scanning.gitlab-ci.yml
  - remote: https://gitlab.com/gitlab-org/gitlab/-/raw/4456abf470520b4fc0e4351a8747c756b392eced/lib/gitlab/ci/templates/Jobs/Dependency-Scanning.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml

dependency_scanning:
  stage: initial-test

gemnasium-dependency_scanning:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - changes:
        - Gemfile.lock

bundler-audit-dependency_scanning:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - changes:
        - Gemfile.lock

license_scanning:
  stage: initial-test
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - changes:
        - Gemfile.lock
      when: manual

container_scanning:
  extends:
    - .scanners-matrix
  variables:
    DOCKERFILE_PATH: $DOCKERFILE_SOURCE
    GIT_STRATEGY: fetch
  before_script:
    ## For IMAGE_TAG_POSTFIX use string after `:` in DOCKERFILE_SOURCE (Dockerfile.fips:ubi => ubi).
    - |
      if [ "$DOCKERFILE_SOURCE" != "Dockerfile" ]; then
        export IMAGE_TAG_POSTFIX="-${DOCKERFILE_SOURCE##*:}"
      fi
    - export DOCKER_IMAGE="$DOCKER_IMAGE$IMAGE_TAG_POSTFIX"
    - 'echo "Scanning: $DOCKER_IMAGE"'
    # SCANNER causes a conflict since it is used internally
    # by GCS to determine which scanner binary to use.
    # When SCANNER=grype, it will try to use the grype
    # binary even if we want to scan using trivy.
    - export SCANNER=trivy
  rules:
    - if: $CONTAINER_SCANNING_DISABLED
      when: never
    - if: ($CI_COMMIT_BRANCH || $CI_MERGE_REQUEST_IID) &&
        $GITLAB_FEATURES =~ /\bcontainer_scanning\b/
